"""
шинхоЪчобчРЖуГвуВ╕уГеуГ╝уГл
уВвуГЧуГкуВ▒уГ╝уВ╖уГзуГ│хЕиф╜УуБошинхоЪуВТчобчРЖуБЩуВЛ
"""

import os
from typing import Optional
from pydantic import BaseModel
from dotenv import load_dotenv

# чТ░хвГхдЙцХ░уВТшкнуБ┐ш╛╝уБ┐
load_dotenv()


class Config(BaseModel):
    """уВвуГЧуГкуВ▒уГ╝уВ╖уГзуГ│шинхоЪуВпуГйуВ╣"""
    
    # OpenAI APIшинхоЪ
    openai_api_key: Optional[str] = os.getenv("OPENAI_API_KEY")
    openai_model: str = "gpt-4o-mini"
    openai_temperature: float = 0.5
    openai_max_tokens: int = 4096
    
    # хЯЛуВБш╛╝уБ┐уГвуГЗуГлшинхоЪ
    embedding_model: str = "sentence-transformers/all-MiniLM-L6-v2"
    
    # уГЩуВпуГИуГлуВ╣уГИуВвшинхоЪ
    vector_store_persist_directory: str = "./data/vector_store"
    chunk_size: int = 1000
    chunk_overlap: int = 200
    
    # RAGцдЬч┤вшинхоЪ
    similarity_threshold: float = 0.5
    max_results: int = 3
    
    # ч┐╗ши│шинхоЪ
    translation_service: str = "google"  # google, deepl
    supported_languages: list = ["ja", "en", "zh", "ko", "es", "fr", "de"]
    
    # UIшинхоЪ
    page_title: str = "хдЪшиАшкЮRAGхХПчнФуВ╖уВ╣уГЖуГа"
    page_icon: str = "ЁЯдЦ"
    
    # уГнуВ░шинхоЪ
    log_level: str = "INFO"
    
    def validate_openai_key(self) -> bool:
        """OpenAI APIуВнуГ╝уБоцЬЙхК╣цАзуВТуГБуВзуГГуВп"""
        return self.openai_api_key is not None and len(self.openai_api_key) > 0


# уВ░уГнуГ╝уГРуГлшинхоЪуВдуГ│уВ╣уВ┐уГ│уВ╣
config = Config() 